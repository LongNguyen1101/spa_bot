import os
import uuid
import aiohttp
import traceback
from typing import Any, TypedDict
from langgraph.graph import StateGraph

from core.graph.state import init_state
from database.connection import supabase_client
from repository.async_repo import AsyncCustomerRepo

from log.logger_config import setup_logging
from dotenv import load_dotenv

load_dotenv()
logger = setup_logging(__name__)
async_customer_repo = AsyncCustomerRepo(supabase_client=supabase_client)

WEBHOOK_URL = os.getenv("WEBHOOK_URL")

class ResponseModel(TypedDict):
    content: str | None
    error: str | None   

async def _get_or_create_uuid(chat_id: str) -> str:
    """
    L·∫•y `uuid` hi·ªán t·∫°i c·ªßa kh√°ch theo `chat_id`, n·∫øu ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi v√† l∆∞u.

    Args:
        chat_id (str): ƒê·ªãnh danh cu·ªôc h·ªôi tho·∫°i/kh√°ch h√†ng.

    Returns:
        str: UUID hi·ªán c√≥ ho·∫∑c m·ªõi t·∫°o.
    """
    current_uuid = await async_customer_repo.get_uuid(chat_id=chat_id)
    
    if not current_uuid:
        new_uuid = str(uuid.uuid4())
        await async_customer_repo.update_uuid(chat_id=chat_id, new_uuid=new_uuid)
        return new_uuid

    return current_uuid

async def handle_normal_chat(
    user_input: str,
    chat_id: str,
    thread_id: str,
    customer: dict,
    graph: StateGraph
) -> ResponseModel:
    """
    X·ª≠ l√Ω lu·ªìng chat th√¥ng th∆∞·ªùng: n·∫°p state, c·∫≠p nh·∫≠t th√¥ng tin kh√°ch, g·ªçi graph v√† tr·∫£ v·ªÅ `events`.

    Args:
        user_input (str): N·ªôi dung ng∆∞·ªùi d√πng nh·∫≠p.
        chat_id (str): M√£ cu·ªôc h·ªôi tho·∫°i.
        customer (dict): Th√¥ng tin kh√°ch h√†ng l·∫•y t·ª´ DB.
        graph (StateGraph): ƒê·ªì th·ªã t√°c v·ª• ch√≠nh ƒë·ªÉ suy lu·∫≠n.

    Returns:
        tuple[Any, str] | tuple[None, None]: C·∫∑p (events, thread_id) ho·∫∑c (None, None) n·∫øu l·ªói.
    """
    try:
        config = {"configurable": {"thread_id": thread_id}}

        state = (graph.get_state(config).values 
                 if graph.get_state(config).values 
                 else init_state())

        state["user_input"] = user_input
        state["chat_id"] = chat_id
        
        state["customer_id"] = customer["id"]
        state["name"] = customer["name"]
        state["phone"] = customer["phone"]
        state["email"] = customer["email"]

        result = graph.invoke(state, config=config)
        data = result["messages"][-1].content

        return ResponseModel(
            content=data, 
            error=None
        )
    
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Exception: {e}")
        logger.error(f"Chi ti·∫øt l·ªói: \n{error_details}")
        
        return ResponseModel(
            content=None,
            error=str(e)
        )
        
async def handle_new_chat(
    customer: dict,
    new_customer_flag: bool
) -> ResponseModel:
    try:
        if new_customer_flag is False:
            logger.info("Old customer -> create new thread_id")
            session = customer["sessions"][0]
            thread_id = str(uuid.uuid4())

            # Create new session -> end old session -> NO add new event
            new_session = await async_customer_repo.create_session(
                customer_id=customer["id"],
                thread_id=thread_id
            )
            if not new_session:
                logger.error("Error in DB -> Cannot create session")
                return ResponseModel(
                    content=None,
                    error="L·ªói kh√¥ng th·ªÉ c·∫≠p nh·∫≠t thread_id"
                )
            logger.info(f"Create session successfully id: {new_session["id"]}")

            end_session = await async_customer_repo.update_end_session(session_id=session["id"])
            if not end_session:
                logger.error(f"Error in DB -> Cannot update session id: {session["id"]}")
                return ResponseModel(
                    content=None,
                    error="L·ªói kh√¥ng th·ªÉ c·∫≠p nh·∫≠t thread_id"
                )
            logger.info(f"Create session successfully id: {new_session["id"]}")
            logger.info(f"C·∫≠p nh·∫≠t thread_id c·ªßa kh√°ch: {customer["id"]} l√† {thread_id}")
        else:
            logger.info("New customer -> no need to update thread_id")

        response = (
            "D·∫° em ch√†o m·ª´ng kh√°ch ƒë·∫øn v·ªõi AnVie Spa üå∏ ‚Äì "
            "n∆°i kh√°ch c√≥ th·ªÉ d·ªÖ d√†ng ƒë·∫∑t l·ªãch v√† t√¨m hi·ªÉu c√°c "
            "d·ªãch v·ª• chƒÉm s√≥c s·∫Øc ƒë·∫πp, th∆∞ gi√£n trong kh√¥ng gian "
            "sang tr·ªçng, d·ªãu nh·∫π. Em r·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ƒë·ªìng h√†nh v√† "
            "h·ªó tr·ª£ kh√°ch ƒë·ªÉ c√≥ tr·∫£i nghi·ªám th∆∞ gi√£n tr·ªçn v·∫πn ·∫°."
        )

        return ResponseModel(
            content=response,
            error=None
        )
        
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Exception: {e}")
        logger.error(f"Chi ti·∫øt l·ªói: \n{error_details}")
        
        return ResponseModel(
            content=None,
            error=str(e)
        )
        
async def handle_delete_me(
    chat_id: str
) -> ResponseModel:
    """
    Dev only (delete customer with chat id): X√≥a kh√°ch h√†ng kh·ªèi DB.

    Args:
        chat_id (str): ƒê·ªãnh danh cu·ªôc h·ªôi tho·∫°i.

    Yields:
        str: Chu·ªói SSE d·∫°ng `data: {...}` v√† token `[DONE]` khi ho√†n t·∫•t.
    """
    try:
        deleted_customer = await async_customer_repo.delete_customer(chat_id=chat_id)

        if not deleted_customer:
            logger.error(f"L·ªói ·ªü c·∫•p DB -> Kh√¥ng x√≥a kh√°ch v·ªõi chat_id: {chat_id}")
            return ResponseModel(
                content=None,
                error="L·ªói kh√¥ng th·ªÉ x√≥a kh√°ch h√†ng"
            )
            
        else:
            logger.info(f"X√≥a th√†nh c√¥ng kh√°ch v·ªõi chat_id: {chat_id}")

            response = (
                "Dev only: ƒê√£ x√≥a th√†nh c√¥ng kh√°ch h√†ng kh·ªèi h·ªá th·ªëng."
            )

            return ResponseModel(
                content=response,
                error=None
            )
        
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Exception: {e}")
        logger.error(f"Chi ti·∫øt l·ªói: \n{error_details}")
        
        return ResponseModel(
            content=None,
            error=str(e)
        )
        
async def send_to_webhook(data: dict, chat_id: str):
    """
    G·ª≠i response data ƒë·∫øn webhook URL
    Args:
        data (dict): D·ªØ li·ªáu response c·∫ßn g·ª≠i
        chat_id (str): ID c·ªßa chat
    """
    try:
        payload = {
            "chat_id": chat_id,
            "response": data,
            "timestamp": traceback.format_exc()  # C√≥ th·ªÉ thay b·∫±ng datetime.now().isoformat()
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                WEBHOOK_URL, 
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    logger.info(f"ƒê√£ g·ª≠i th√†nh c√¥ng response ƒë·∫øn webhook cho chat_id: {chat_id}")
                else:
                    logger.error(f"L·ªói khi g·ª≠i ƒë·∫øn webhook. Status: {response.status}, chat_id: {chat_id}")
                    
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Exception: {e}")
        logger.error(f"Chi ti·∫øt l·ªói: \n{error_details}")
        raise