import json
import uuid
import asyncio
import traceback
from typing import Any, TypedDict
from langgraph.graph import StateGraph
from langchain_core.messages import AIMessage

from core.graph.state import init_state
from services.utils import delete_customer, get_uuid, update_uuid

from log.logger_config import setup_logging

logger = setup_logging(__name__)

class ResponseModel(TypedDict):
    chat_id: str
    content: str | None
    error: str | None   

async def _get_or_create_uuid(chat_id: str) -> str:
    """
    L·∫•y `uuid` hi·ªán t·∫°i c·ªßa kh√°ch theo `chat_id`, n·∫øu ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi v√† l∆∞u.

    Args:
        chat_id (str): ƒê·ªãnh danh cu·ªôc h·ªôi tho·∫°i/kh√°ch h√†ng.

    Returns:
        str: UUID hi·ªán c√≥ ho·∫∑c m·ªõi t·∫°o.
    """
    current_uuid = await get_uuid(chat_id=chat_id)
    
    if not current_uuid:
        new_uuid = str(uuid.uuid4())
        await update_uuid(chat_id=chat_id, new_uuid=new_uuid)
        return new_uuid

    return current_uuid

async def handle_normal_chat(
    user_input: str,
    chat_id: str,
    customer: dict,
    graph: StateGraph
) -> ResponseModel:
    """
    X·ª≠ l√Ω lu·ªìng chat th√¥ng th∆∞·ªùng: n·∫°p state, c·∫≠p nh·∫≠t th√¥ng tin kh√°ch, g·ªçi graph v√† tr·∫£ v·ªÅ `events`.

    Args:
        user_input (str): N·ªôi dung ng∆∞·ªùi d√πng nh·∫≠p.
        chat_id (str): M√£ cu·ªôc h·ªôi tho·∫°i.
        customer (dict): Th√¥ng tin kh√°ch h√†ng l·∫•y t·ª´ DB.
        graph (StateGraph): ƒê·ªì th·ªã t√°c v·ª• ch√≠nh ƒë·ªÉ suy lu·∫≠n.

    Returns:
        tuple[Any, str] | tuple[None, None]: C·∫∑p (events, thread_id) ho·∫∑c (None, None) n·∫øu l·ªói.
    """
    try:
        thread_id = await _get_or_create_uuid(chat_id=chat_id)

        if not thread_id:
            logger.error("L·ªói ·ªü c·∫•p DB -> kh√¥ng l·∫•y ƒë∆∞·ª£c uuid")
            return ResponseModel(
                chat_id=chat_id, 
                content=None, 
                error="L·ªói kh√¥ng th·ªÉ l·∫•y uuid"
            )

        logger.info(f"L·∫•y ƒë∆∞·ª£c uuid c·ªßa kh√°ch: {chat_id} l√† {thread_id}")

        config = {"configurable": {"thread_id": thread_id}}

        state = (graph.get_state(config).values 
                 if graph.get_state(config).values 
                 else init_state())

        state["user_input"] = user_input
        state["chat_id"] = chat_id
        
        state["customer_id"] = customer["id"]
        state["name"] = customer["name"]
        state["phone"] = customer["phone"]
        state["email"] = customer["email"]

        result = graph.invoke(state, config=config)
        data = result["messages"][-1].content

        return ResponseModel(
            chat_id=chat_id, 
            content=data, 
            error=None
        )
    
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Exception: {e}")
        logger.error(f"Chi ti·∫øt l·ªói: \n{error_details}")
        
        return ResponseModel(
            chat_id=chat_id,
            content=None,
            error=str(e)
        )
        
async def handle_new_chat(
    chat_id: str
) -> ResponseModel:
    """
    Kh·ªüi t·∫°o phi√™n chat m·ªõi (reset): c·∫≠p nh·∫≠t `uuid` m·ªõi trong DB v√† ph√°t th√¥ng b√°o SSE.

    Args:
        chat_id (str): ƒê·ªãnh danh cu·ªôc h·ªôi tho·∫°i.

    Yields:
        str: Chu·ªói SSE d·∫°ng `data: {...}` v√† token `[DONE]` khi ho√†n t·∫•t.
    """
    try:
        new_uuid = str(uuid.uuid4())
        updated_uuid = await update_uuid(
            chat_id=chat_id,
            new_uuid=new_uuid
        )

        if not updated_uuid:
            logger.error("L·ªói ·ªü c·∫•p DB -> Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t uuid")
            return ResponseModel(
                chat_id=chat_id,
                content=None,
                error="L·ªói kh√¥ng th·ªÉ c·∫≠p nh·∫≠t uuid"
            )
            
        else:
            logger.info(f"C·∫≠p nh·∫≠t uuid c·ªßa kh√°ch: {chat_id} l√† {updated_uuid}")

            response = (
                "D·∫° em ch√†o m·ª´ng kh√°ch ƒë·∫øn v·ªõi AnVie Spa üå∏ ‚Äì "
                "n∆°i kh√°ch c√≥ th·ªÉ d·ªÖ d√†ng ƒë·∫∑t l·ªãch v√† t√¨m hi·ªÉu c√°c "
                "d·ªãch v·ª• chƒÉm s√≥c s·∫Øc ƒë·∫πp, th∆∞ gi√£n trong kh√¥ng gian "
                "sang tr·ªçng, d·ªãu nh·∫π. Em r·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c ƒë·ªìng h√†nh v√† "
                "h·ªó tr·ª£ kh√°ch ƒë·ªÉ c√≥ tr·∫£i nghi·ªám th∆∞ gi√£n tr·ªçn v·∫πn ·∫°."
            )

            return ResponseModel(
                chat_id=chat_id,
                content=response,
                error=None
            )
        
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Exception: {e}")
        logger.error(f"Chi ti·∫øt l·ªói: \n{error_details}")
        
        return ResponseModel(
            chat_id=chat_id,
            content=None,
            error=str(e)
        )
        
async def handle_delete_me(
    chat_id: str
) -> ResponseModel:
    """
    Dev only (delete customer with chat id): X√≥a kh√°ch h√†ng kh·ªèi DB.

    Args:
        chat_id (str): ƒê·ªãnh danh cu·ªôc h·ªôi tho·∫°i.

    Yields:
        str: Chu·ªói SSE d·∫°ng `data: {...}` v√† token `[DONE]` khi ho√†n t·∫•t.
    """
    try:
        deleted_customer = await delete_customer(chat_id=chat_id)

        if not deleted_customer:
            logger.error(f"L·ªói ·ªü c·∫•p DB -> Kh√¥ng x√≥a kh√°ch v·ªõi chat_id: {chat_id}")
            return ResponseModel(
                chat_id=chat_id,
                content=None,
                error="L·ªói kh√¥ng th·ªÉ x√≥a kh√°ch h√†ng"
            )
            
        else:
            logger.info(f"X√≥a th√†nh c√¥ng kh√°ch v·ªõi chat_id: {chat_id}")

            response = (
                "Dev only: ƒê√£ x√≥a th√†nh c√¥ng kh√°ch h√†ng kh·ªèi h·ªá th·ªëng."
            )

            return ResponseModel(
                chat_id=chat_id,
                content=response,
                error=None
            )
        
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Exception: {e}")
        logger.error(f"Chi ti·∫øt l·ªói: \n{error_details}")
        
        return ResponseModel(
            chat_id=chat_id,
            content=None,
            error=str(e)
        )
        
async def stream_messages(events: Any, chat_id: str):
    """
    Chuy·ªÉn ƒë·ªïi lu·ªìng s·ª± ki·ªán t·ª´ graph th√†nh SSE ƒë·ªÉ client nh·∫≠n theo th·ªùi gian th·ª±c.

    Parameters:
        - events (Any): Async iterator s·ª± ki·ªán t·ª´ graph.astream.
        - chat_id (str): ƒê·ªãnh danh cu·ªôc h·ªôi tho·∫°i.

    Yields:
        str: Chu·ªói SSE d·∫°ng `data: {...}\n\n`.
    """
    last_printed = None
    closed = False

    try:
        async for data in events:
            for key, value in data.items():
                    messages = value.get("messages", [])
                    if not messages:
                        continue

                    last_msg = messages[-1]
                    if isinstance(last_msg, AIMessage):
                        content = last_msg.content.strip()
                        if content and content != last_printed:
                            last_printed = content
                            msg = {
                                "content": content,
                                "chat_id": chat_id
                            }
                            yield f"data: {json.dumps(msg, ensure_ascii=False)}\n\n"
                            await asyncio.sleep(0.01)  # slight delay for smoother streaming
    except GeneratorExit:
        closed = True
        raise
    except Exception as e:
        error_dict = {
            "error": str(e),
            "chat_id": chat_id
        }
        yield f"data: {json.dumps(error_dict, ensure_ascii=False)}\n\n"
    finally:
        if not closed:
            yield "data: [DONE]\n\n"